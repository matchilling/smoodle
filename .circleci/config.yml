version: 2.1

commands:
  restore_mix_cache:
    steps:
      - restore_cache:
          key: elixir-deps-{{ .Branch }}-{{ checksum "mix.lock" }}

  save_mix_cache:
    steps:
      - save_cache:
          key: elixir-deps-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - deps

  restore_yarn_cache:
    steps:
      - restore_cache:
          key: node-modules-{{ .Branch }}-{{ checksum "yarn.lock" }}

  save_yarn_cache:
    - save_cache:
        key: node-modules-{{ .Branch }}-{{ checksum "yarn.lock" }}
        paths:
          - node_modules

jobs:
  build_back_end:
    docker:
      - image: circleci/elixir:1.9.1
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - restore_mix_cache
      - run:
          command: |
            env
            mix local.hex --force
            mix local.rebar --force
            mix deps.get
            mix compile
      - save_mix_cache
      - persist_to_workspace:
          root: ~/
          paths:
            - project
            - .mix

  build_front_end:
    docker:
      - image: circleci/node:12.11.0
    working_directory: ~/project/webapp
    steps:
      - attach_workspace:
          at: ~/
      - restore_yarn_cache
      - run:
          command: |
            yarn install
      - save_yarn_cache

  backend_unit_tests:
    docker:
      - image: circleci/elixir:1.9.1
      - image: circleci/postgres
        environment:
          POSTGRES_PASSWORD: secret
          POSTGRES_USER: homestead
          POSTGRES_DB: smoodle_dev
    steps:
      - attach_workspace:
          at: ~/
      - run: mix test --trace
      - store_test_results:
          path: test-results

  frontend_unit_tests:
    docker:
      - image: circleci/node:12.11.0-browsers
    working_directory: ~/project/webapp
    steps:
      - attach_workspace:
          at: ~/
      - restore_yarn_cache:
      - run:
          command: |
            yarn test-once
      - store_test_results:
          path: test-results

  deploy:
    docker:
      - image: circleci/elixir:1.9.1
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: deploy to gigalixir
          command: |
            echo -e "machine git.gigalixir.com\nlogin ${GIGALIXIR_USER}\npassword ${GIGALIXIR_PASSWORD}" > ~/.netrc
            git push https://git.gigalixir.com/smoodle.git master

workflows:
  version: 2.1
  build_and_test:
    jobs:
      - build_back_end:
          filters:
            tags:
              only: /^v.*/
      - backend_unit_tests:
          requires:
            - build_back_end
          filters:
            tags:
              only: /^v.*/
      - build_front_end:
          requires:
            - build_back_end
          filters:
            tags:
              only: /^v.*/
      - frontend_unit_tests:
          requires:
            - build_front_end
          filters:
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - backend_unit_tests
            - frontend_unit_tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/


